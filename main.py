from binance.um_futures import UMFutures
from dotenv import load_dotenv
import os
import requests
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from database import Orders, Base, engine
from setup import create_datas
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboard import get_limit_inline_keyboard, get_rsi_keyboard, get_take_profit_keyboard, get_stop_lose_keyboard, get_time_frame_keyboard, get_count_frame_keyboard, get_deposit_keyboard
from metrix import *

load_dotenv()

API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
TG_TOKEN = os.getenv("TG_TOKEN")
TG_CHANEL = os.getenv("TG_CHANEL")



bot = Bot(token=TG_TOKEN)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Dispatcher
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
router = Router()
dp.include_router(router)

client = UMFutures(key=API_KEY, secret=API_SECRET)

is_running = False


class Form(StatesGroup):
    limit = State()
    take_profit = State()
    stop_lose = State()
    time_frame = State()
    count_frame = State()
    deposit = State()
    rsi = State()


def send_message(text):
    response = requests.post(
        f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage",
        json={"chat_id": TG_CHANEL, "text": text},
    )


@dp.message(Command("start"))
async def send_welcome(message: types.Message):

    text = """
ü§ñT-Bot
ü™™–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èü™™:

/balance - üí∞–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å
/check - üì´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
/info - ‚ôü –£–∑–Ω–∞—Ç—å –æ –º–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏—Ç–æ—Ä–≥–æ–≤–ª–∏
/settings_now - üìÅ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/stop_all - üõë –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ 
/run - üü© –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/settings - üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
/top_coins - ü™ô –¢–æ–ø –º–æ–Ω–µ—Ç –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–µ–π—á–∞—Å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∏—Å–∫–∞ –≤—Ö–æ–¥–∞
"""
    await message.answer(text)


@dp.message(Command("info"))
async def top_coins(message: types.Message):
    try:

        text = """
üü©–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤üü©

–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã) –∏ RA (–†—ã–Ω–æ–∫/–ê–Ω–∞–ª–∏–∑). –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–π.

2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:

RSI: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ 30 —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å, –∞ –≤—ã—à–µ 70 ‚Äî –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å. –í–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI –Ω–µ –≤—ã—à–µ 50 –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
RA: –≠—Ç–æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ –º–æ–∂–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö.

3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∫–ª—é—á–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ä–æ–≤–Ω–µ–π Take Profit –∏ Stop Loss –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É–±—ã—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.

4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:
–í—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ USDT, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –∞–∫—Ç–∏–≤–æ–≤, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ —Å—á–µ—Ç—É, –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–µ–≤–µ—Ä–∏–¥–∂—É.

5. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:
–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è, –≤—ã–±–∏—Ä–∞—è —Ç–æ–ø–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.

6. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:
–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä—ã–Ω–∫–µ.

–ù–∞—à–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ—ë –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö.
–û–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∫–∞–ø–∏—Ç–∞–ª–æ–º –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏. üòä
        """
        await message.answer(text)
        await message.answer("/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ")

    except Exception as e:
        await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
        """)


@dp.message(Command("top_coins"))
async def top_coins(message: types.Message):
    try:
        top = session.query(Information).filter(Information.name == "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤").first().data
        top_coins_list = get_top_coins()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É
        text = f" –£ –≤–∞—Å –∑–∞–¥–∞–Ω –¢–æ–ø-{top} –º–æ–Ω–µ—Ç:\n" + "üêÉ".join(top_coins_list)
        await message.answer(text)
        await message.answer("/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ")

    except Exception as e:
        await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
        """)


@dp.message(Command("balance"))
async def balance(message: types.Message):
    try:
        global trading_bot


        text = f"""
–ë–∞–ª–∞–Ω—Å: {trading_bot.check_balance()} USDT

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
"""
        await message.answer(text)

    except Exception as e:
        await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
        """)


@dp.message(Command("check"))
async def check(message: types.Message):
    try:
        global trading_bot
        position = trading_bot.open_position
        if position:
            text = f"""
–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ {trading_bot.open_position.symbol}
–û–±—ä–µ–º: {trading_bot.open_position.volume}
TP: {trading_bot.open_position.take_profit}
SL: {trading_bot.open_position.stop_loss}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
"""
        else:
            text = f"""
–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç!
            
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
            """
        await message.answer(text)

    except Exception as e:
        await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
        """)


@dp.message(Command("run"))
async def start_trading(message: types.Message):
    global is_running, trading_bot

    if not is_running:
        is_running = True
        await message.answer("""
–ù–∞—á–∏–Ω–∞—é —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å! üöÄ
        
/top_coins - —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è
/stop_all - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫""")
        await trading_bot.trade_logic()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
    else:
        if trading_bot.check_open_positions():
            await message.answer(f"""
–Ø —É–∂–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é –≤–∞–ª—é—Ç—É! 
–ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è!
                
–ú–æ–Ω–µ—Ç–∞: {trading_bot.open_position.symbol}
–û–±—ä–µ–º: {trading_bot.open_position.volume}
–ó–∞–∫—Ä—ã—Ç—å +: {trading_bot.open_position.take_profit}
–ó–∞–∫—Ä—ã—Ç—å -: {trading_bot.open_position.stop_loss}
                
/top_coins - ü™ô —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è
/stop_all - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫
(–ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª—É—á—à–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ)
""")
        else:
            await message.answer("""
–Ø –Ω–∞—á–∞–ª —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å! üöÄ
–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞! 
                    
/top_coins - ü™ô —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è
/stop_all - –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫""")



@dp.message(Command("stop_all"))
async def stop_all_trading(message: types.Message):
    global is_running
    if is_running:
        trading_bot.close_all_positions()
        is_running = False
        await message.answer("""
–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã. –Ø –æ—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. üõë
        
/run - üü© –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
        """)
    else:
        trading_bot.close_all_positions()
        await message.answer("""
–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
        
/run - üü© –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@dp.message(Command("settings_now"))
async def stop_all_trading(message: types.Message):
    tp = session.query(Information).filter(Information.name == "Take profit").first().data
    sl = session.query(Information).filter(Information.name == "Stop lose").first().data
    await message.answer(f"""
   üõ†ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–æ—Ç–∞ ü§ñüõ†

–ë–æ—Ç –∏—â–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ç–æ–ø - {session.query(Information).filter(Information.name == "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤").first().data } –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ 24—á
Take profit (—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞) –Ω–∞ - {round(float(tp) * 100, 2)} % —Ä–æ—Å—Ç–∞ üìà
Stop lose (—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –ø–æ–¥–µ–Ω–∏–∏) - {round(float(sl) * 100, 2)} % —É–ø–∞–¥–∫–∞ üìâ
Time frame (—Å–≤–µ—á–∏) -{session.query(Information).filter(Information.name == "Time Frame").first().data} üìä
Count frame (—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π —Å–º–æ—Ç—Ä–∏–º) - {session.query(Information).filter(Information.name == "Count frame").first().data} üïØ 
RSI (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–ª–∞) - {session.query(Information).filter(Information.name == "RSI").first().data} üêÉ 
Deposit (—Å—Ç–∞–≤–∫–∞) - {session.query(Information).filter(Information.name == "Deposit").first().data}$ üíµ 

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@dp.message(Command("settings"))
async def start_settings(message: types.Message, state: FSMContext):
    try:
        await state.set_state(Form.limit)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
        limit_value = session.query(Information).filter(Information.name == "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤").first()

        if limit_value:
            await message.answer(f"""
‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
–Ø –¥–∞—é —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–æ—Ç–∏–≤ —Ñ–æ–º–æ –∏ —á–µ–ª–æ–≤–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤!
–ù–µ–ª—å–∑—è –∑–∞–±—ã–≤–∞—Ç—å –æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ, –º–∞–ª—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –Ω–µ –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö –∏ –æ—Çc–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫!
‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è

–¢–æ–∫–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—É—é –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞—é —Ç–æ–ø –ª—É—á—à–∏—Ö.
–í–≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å–µ–π—á–∞—Å: {limit_value.data}):
            """, reply_markup=get_limit_inline_keyboard())
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. /start")
    except Exception as e:
        await message.answer(f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.limit))  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ StateFilter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def process_limit(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        profit_value = session.query(Information).filter(Information.name == "Take profit").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!
        
–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            limit = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(limit=limit)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await state.set_state(Form.take_profit)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(
                f"""
–ü—Ä–∏ –¥–æ—Å—Ç–µ–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Ö–æ–¥–∞ —è –±—É–¥—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å!
                
–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –º–Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (—Å–µ–π—á–∞c: {round(float(profit_value) * 100 , 2)}%):""",
                reply_markup=get_take_profit_keyboard(),
            )

    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.take_profit))
async def process_profit(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        stop_value = session.query(Information).filter(Information.name == "Stop lose").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            profit = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(take_profit=profit)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await state.set_state(Form.stop_lose)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(

                f"""
–ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–æ—Ç–µ—Ä—è–º–∏ —Ç–∞–∫ —á—Ç–æ —è —Å—Ç–∞–≤–ª—é Stop lose!
                
–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –º–Ω–µ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (—Å–µ–π—á–∞—Å: {round(float(stop_value) * 100 , 2)}%):""",
                reply_markup=get_stop_lose_keyboard(),
            )

    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.stop_lose))
async def process_stop(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        time_value = session.query(Information).filter(Information.name == "Time Frame").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            stop = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(stop_lose=stop)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await state.set_state(Form.time_frame)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(
                f"""
–Ø –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π, –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å Time frame –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏!
–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π: –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏!
                
–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Å–≤–µ—á–µ–π (—Å–µ–π—á–∞—Å: {time_value}):""",
                reply_markup=get_time_frame_keyboard(),
            )
    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.time_frame))
async def process_time(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        count_value = session.query(Information).filter(Information.name == "Count frame").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            time = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(time_frame=time)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await state.set_state(Form.count_frame)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(
                f"""
–Ø –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ–∑–∏ –∑–∞–∫—Ä—ã–≤–∞–ª–∏—Å—å –≤ –ø–ª—é—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥ –¥—Ä—É–≥–∞!
                
–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –º–Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é (—Å–µ–π—á–∞—Å: {count_value}):""",
                reply_markup=get_count_frame_keyboard(),
            )
    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.count_frame))
async def process_count(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        rsi_value = session.query(Information).filter(Information.name == "RSI").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            count = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(count_frame=count)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()
            await state.set_state(Form.rsi)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(
                f"""
–û.

–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å RSI - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
–ì–¥–µ 30 - –±–æ–ª—å—à–∞—è —Å–∏–ª–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, 70 - –±–æ–ª—å—à–∞—è —Å–∏–ª–∞ —É –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.
–î–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–æ–¥–µ—Ä–∂–∏–≤–∞–µ–º –±—É–¥–µ—Ç –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å –±–æ–ª–µ–µ 50.

–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å (—Å–µ–π—á–∞—Å: {rsi_value}):""",
                reply_markup=get_rsi_keyboard(),)
    except Exception as e:
        await state.clear()
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.rsi))
async def process_count(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        dep_value = session.query(Information).filter(Information.name == "Deposit").first().data
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            rsi = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(rsi=rsi)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()
            await state.set_state(Form.deposit)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await (callback_query.message if callback_query else message).answer(
                f"""
–Ø –±—É–¥—É –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É.
                
–í—ã–±–µ—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç —Å –∫–æ—Ç–æ—Ä—ã–º –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é (—Å–µ–π—á–∞—Å: {dep_value}$):""",
                reply_markup=get_deposit_keyboard(),)
    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_query:
            await callback_query.message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")
        else:
            await message.answer(
                f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")


@router.callback_query(StateFilter(Form.deposit))
async def process_dep(callback_query: types.CallbackQuery, state: FSMContext, message: types.Message = None):
    try:
        if callback_query.data == "cancel":
            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback_query.message.answer(
                """
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ!

–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """)
        else:
            dep = callback_query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ callback_data
            await state.update_data(deposit=dep)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await callback_query.answer()
            await state.set_state(Form.take_profit)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data = await state.get_data()
            old_limit = session.query(Information).filter(Information.name == "–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤").first()
            old_take_profit = session.query(Information).filter(Information.name == "Take profit").first()
            old_stop_lose = session.query(Information).filter(Information.name == "Stop lose").first()
            old_time_frame = session.query(Information).filter(Information.name == "Time Frame").first()
            old_count_frame = session.query(Information).filter(Information.name == "Count frame").first()
            old_rsi = session.query(Information).filter(Information.name == "RSI").first()
            old_deposit = session.query(Information).filter(Information.name == "Deposit").first()

            first, twost, thirth, fourth, fiveth, sixth, seventh = (old_limit.data,
                                                           float(old_take_profit.data) * 100,
                                                           float(old_stop_lose.data) * 100,
                                                           old_time_frame.data,
                                                           old_count_frame.data,
                                                           old_rsi.data,
                                                           old_deposit.data)

            old_limit.data = data.get("limit")
            old_take_profit.data = float(data.get("take_profit")) * 0.01
            old_stop_lose.data = float(data.get("stop_lose")) * 0.01
            old_time_frame.data = data.get("time_frame")
            old_count_frame.data = data.get("count_frame")
            old_rsi.data = data.get("rsi")
            old_deposit.data = data.get("deposit")
            session.add(old_limit)
            session.add(old_deposit)
            session.add(old_time_frame)
            session.add(old_take_profit)
            session.add(old_stop_lose)
            session.add(old_rsi)
            session.add(old_count_frame)
            session.commit()
            await (callback_query.message if callback_query else message).answer(
                f"""
                
    ‚ôªÔ∏è–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã‚ôªÔ∏è
    
–õ–∏–º–∏—Ç {first} -> {data.get("limit")}  
Take profit {round(twost, 2)}% -> {round(float(data.get("take_profit")), 2)}%üìà
Stop lose {round(thirth, 2)}% -> % {round(float(data.get("stop_lose")), 2)}%üìâ
Time frame {fourth}üìä -> {data.get("time_frame")}üìä
Count frame {fiveth}üïØ-> {data.get("count_frame")}üïØ
RSI {sixth} üêÉ-> {data.get("rsi")}üêÉ
Deposit {seventh}üíµ -> {data.get("deposit")} üíµ 

/settings_now - üìÅ –ö–∞–∫ –Ω—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç
/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
                """,
            )

            await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except Exception as e:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.reply(
            f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:  + {str(e)}

/start - üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã 
""")




class Position:
    def __init__(self, symbol, volume, take_profit, stop_loss):
        self.symbol = symbol
        self.volume = volume
        self.take_profit = take_profit
        self.stop_loss = stop_loss
    def __repr__(self):
        return f"Position(symbol={self.symbol}, volume={self.volume}, take_profit={self.take_profit}, stop_loss={self.stop_loss})"


class TradingBot:
    def __init__(self):
        self.open_position = None

    def check_open_positions(self):
        return self.open_position is not None

    def close_all_positions(self):
        if self.open_position:
            symbol = self.open_position.symbol
            volume = self.open_position.volume

            try:
                side = 'SELL' if volume > 0 else 'BUY'

                order_response = client.new_order(symbol=symbol, side=side, type='MARKET', quantity=abs(volume))
                print(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –Ω–∞ {volume}.")
                send_message(f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –Ω–∞ {volume}.")

                # –û–±–Ω—É–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
                self.open_position = None
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

    @staticmethod
    def check_balance():
        # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_info = round(float(client.account()['availableBalance']), 1)
        return round(float(balance_info), 2)


    async def trade_logic(self):
        while is_running:
            if self.check_open_positions():
                send_message(f"""
                –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è!
                –ú–æ–Ω–µ—Ç–∞: {self.open_position.symbol}
                –û–±—ä–µ–º: {self.open_position.volume}
                –ó–∞–∫—Ä—ã—Ç—å +: {self.open_position.take_profit}
                –ó–∞–∫—Ä—ã—Ç—å -: {self.open_position.stop_loss}
                –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: {get_symbol_price(self.open_position.symbol)}

                –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ - /stop_all
                (–ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª—É—á—à–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ)

                –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...
                """)
                await asyncio.sleep(300)
                continue

            my_top_coins = get_top_coins()
            for symbol in my_top_coins:
                close = get_close_data(symbol)
                volume = get_trade_volume(symbol)
                rsi = calculate_rsi(close)
                ra = calculate_ra(close)
                price = get_symbol_price(symbol)
                c_f = session.query(Information).filter(Information.name == "Count frame").first().data
                period = int(session.query(Information).filter(Information.name == "Period").first().data)

                if len(close) >= period:
                    if rsi > int(session.query(Information).filter(Information.name == "RSI").first().data):
                        print(f"""
                            RSI –º–æ–Ω–µ—Ç—ã {symbol} –æ–∫–∞–∑–∞–ª—Å—è –≤—ã—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {rsi}.
                            –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ–≤—ã—à–µ–Ω–∏—é —Ä–∏—Å–∫–∞!
                            (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: {session.query(Information).filter(Information.name == "RSI").first().data})
                            –ò—â–µ–º –¥–∞–ª—å—à–µ...
                            """)
                        await asyncio.sleep(5)
                        continue

                    if ra > price:
                            print(f"""
                                RA –º–æ–Ω–µ—Ç—ã {symbol} –æ–∫–∞–∑–∞–ª—Å—è –±–æ–ª—å—à–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
                                –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç—É —Ä—ã–Ω–∫–∞ —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç–≤—É–µ—Ç –Ω–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
                                RA {symbol}: {ra}$
                                –¶–µ–Ω–∞ {symbol}: {price}$
                                –ò—â–µ–º –¥–∞–ª—å—à–µ...
                                """)
                            await asyncio.sleep(5)
                            continue

                    if self.check_balance() < int(session.query(Information).filter(Information.name == "Deposit").data) * 3:
                        dep = session.query(Information).filter(Information.name == "Deposit").data
                        print(f"""
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {symbol}.
                            –ë–∞–ª–∞–Ω—Å: {self.check_balance()}
                            
                            –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å x3 —É–∫–∞–∑–∞–Ω—ã–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Å–µ–π—á–∞—Å: {dep})
                            """)
                        await asyncio.sleep(5)
                        continue

                    if close[-2] > close[-int(c_f) - 1]:

                        self.open_position = Position(symbol, volume, get_take_profit_price(price), get_stop_lose_price(price))
                        open_market_order(symbol, volume)
                        await asyncio.sleep(2)
                        open_stop_order(symbol, self.open_position.stop_loss, volume)
                        open_take_profit_order(symbol, self.open_position.take_profit, volume)
                        await asyncio.sleep(2)

                        send_message(f"""
                            ‚ùï‚ùï‚ùï‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ùï‚ùï‚ùï
                            –ú–æ–Ω–µ—Ç–∞ {symbol} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                            
                            –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã: {price}
                            –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ +: {self.open_position.take_profit}
                            –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ -: {self.open_position.stop_loss}
                            –ü–µ—Ä–∏–æ–¥: {period}
                            RSI: {rsi}
                            RA: {ra}
                            """)

                        break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏

                else:
                    print("–î–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ RSI –∏ RA –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")

            else:
                send_message("""–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –û–∂–∏–¥–∞–Ω–∏–µ...100 —Å–µ–∫—É–Ω–¥...""")
                await asyncio.sleep(100)

trading_bot = TradingBot()

async def main():
    create_datas()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    Base.metadata.create_all(bind=engine)
    asyncio.run(main())